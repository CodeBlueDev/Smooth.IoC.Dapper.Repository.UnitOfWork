<?xml version="1.0"?>
<package >
  <metadata>
    <id>Smooth.IoC.Dapper.Repository.UnitOfWork</id>
    <version>$version$</version>
    <title>Smooth.IoC.Dapper.Repository.UnitOfWork</title>
    <authors>Rik Svendsen Rose</authors>
    <owners>Rik Svendsen Rose</owners>
    <licenseUrl>http://opensource.org/licenses/MIT</licenseUrl>
    <projectUrl>https://github.com/generik0/Smooth.IoC.Dapper.Repository.UnitOfWork</projectUrl>
    <iconUrl>https://raw.githubusercontent.com/Generik0/Smooth.IoC.Dapper.Repository.UnitOfWork/master/logo.jpg</iconUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <summary>Smoother IoC using Dapper Dapper.FastCRUD with Repository and UnitOfWork patterns.</summary>
    <description>
I made this project to fix the contradictory concepts behind the Repository and UnitOfWork patterns together with using inversition of control / dependancy injection. Also i wanted to make the resolving of sessions (IDbConnection) and UnitOFWork's (IDbTransaction) automatically connection / begin transaction on creation, and disconnect/commit on disposal.  
Also i wanted the usage of the session, repos and uow to become nice and smooth with IoC. Any IoC.


This should cover 97% of your needs. But i have also insured the the Session and UoW types extend the ADO base interfaces, so you can basically do anything you like with the session / uow, because they are IDbConnection and IDbTransaction.  
*So far there are examples for Autofact, Castle.Windsor, Ninject, Simpleinjector, StructureMap, and Unity.*

I have tried to insure it is as bare bones as possible. Only adding the system libraries needed and Dapper + Dapper.FASTCrud. The IoC of your choice is not included in the package, 
but i have made example registrations for the "majors" look on the project site.  

      Included interfaces with abstractions:

1. **IDbFactory** is a simple interface that you register with your IoC. It can create/spwan ISession's and IUntOfWork's. But primary used in code to spawn sessions.
2. **ISession&lt;TDatabase&gt;** (and Session&lt;TDatabase&gt; abstraction):	Extends IDbConnection. You use it to extend your Database connection / Session type. Yours session classes 
and interfaces require a connection string. So If you have multiple database connections, you need 1 ISession and Session extended Interface and class per database. When the session is 
created by the factory it connects to the database, when it disposes it discontects and disposes. For Castle Windsor it also untracks the object. You can use the session for any IDbConnection or dapper (or extension) framework you like, as ISession extends IDbConnection ;-). 
3. **IUnitOfWork** (and UnitOfWork): Extends IDbTransaction. You don't need to extend anything with this. When you have created a session in you code, you can create a uow from the session. Then the session is created by the factory it begins a transaction (isolation i a parameter), when it disposes it commits (roleback on exception) and disposes. For Castle Windsor it also untracks the object. You can use the transaction for any IDbTransaction work you like as 
IUnitOfWork extends IDbTransaction ;-).
4. **IRepository&lt;TSession, TEntity, TPk&gt;** (Repository&lt;TSession, TEntity, TPk&gt; abstraction):	Is a default repository that you extend with your own repository for each of 
the entities you want a repository for. There as some built in methods for GetAll, Get, and SaveOrUpdate. You can add the methods you need for your entity using any IDbConnection framework. 
 have used [dapper-dot-net](https://github.com/StackExchange/dapper-dot-net) and [dapper.FastCRUD](https://github.com/MoonStorm/Dapper.FastCRUD) for the quering.
5. **IEntity&lt;TPk&gt;**: An interface for your Entities so FastCRUD GetKey works in Repositories. To use this your table / entity should always have and Id column as Pk in 
what every type you like (its a generic :-).
6. **IRepositoryBase** (and RepositoryBase&lt;TEntity&gt; abstraction):	This is a vanilla base repository, you can use it if you do not want to use Dapper or Dapper.FastCRUD 
and/or IEntity interface. It includes an protected method to set the dialect which you will need to do, if you want to use FastCRUD  but without the IEntity interface.

    </description>
    <copyright>Copyright 2016</copyright>
    <tags>dapper crud orm sql sqlite mysql mssql localdb postgresql poco repository unitofwork di ioc autofac castle ninject structuremap unity</tags>
    <frameworkAssemblies>
    </frameworkAssemblies>
    <dependencies>
      <group targetFramework=".NETFramework4.5">
        <dependency id="Dapper" version="[1.50.2, )" />
        <dependency id="StringInterpolationBridge" version="[0.9.1, )"/>
        <dependency id="Dapper.FastCrud" version="[2.4.1, )" />
      </group>
      <group targetFramework=".NETFramework4.6">
        <dependency id="Dapper" version="[1.50.2, )" />
        <dependency id="Dapper.FastCrud" version="[2.4.1, )" />
      </group>
	   <group targetFramework=".NETStandard1.6">
       <dependency id="Dapper" version="[1.50.2, )" />
       <dependency id="System.ComponentModel.Annotations" version="[4.1.0, )" />
       <dependency id="System.ComponentModel.TypeConverter" version="[4.1.0, )" />
       <dependency id="System.Data.Common" version="[4.1.0, )" />
       <dependency id="System.Reflection.Extensions" version="[4.0.1, )" />
	   </group>
    </dependencies>
  </metadata>
  <files>
  <!-- netstandard1.6 -->
    <file src="..\src\Smooth.IoC.Dapper.Repository.UnitOfWork\bin\$configuration$\netstandard1.6\Smooth.IoC.Dapper.Repository.UnitOfWork.dll" target="lib\netstandard1.6" />
    <file src="..\src\Smooth.IoC.Dapper.Repository.UnitOfWork\bin\$configuration$\netstandard1.6\Smooth.IoC.Dapper.Repository.UnitOfWork.xml" target="lib\netstandard1.6" />
    <file src="..\src\Smooth.IoC.Dapper.Repository.UnitOfWork\bin\$configuration$\net461\Smooth.IoC.Dapper.Repository.UnitOfWork.dll" target="lib\net461" />
    <file src="..\src\Smooth.IoC.Dapper.Repository.UnitOfWork\bin\$configuration$\net461\Smooth.IoC.Dapper.Repository.UnitOfWork.xml" target="lib\net461" />
    <file src="..\src\Smooth.IoC.Dapper.Repository.UnitOfWork\bin\$configuration$\net452\Smooth.IoC.Dapper.Repository.UnitOfWork.dll" target="lib\net452" />
    <file src="..\src\Smooth.IoC.Dapper.Repository.UnitOfWork\bin\$configuration$\net452\Smooth.IoC.Dapper.Repository.UnitOfWork.xml" target="lib\net452" />
  </files>
</package>
